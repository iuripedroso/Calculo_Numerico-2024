
def pivoteamento_completo(A, b):
    n = len(A)  # Número de linhas (ou colunas, já que A é quadrada)
    
    if n != len(A[0]):
        raise ValueError("A matriz A deve ser quadrada!")

    ordem = list(range(n))  # Ordem das variáveis
    multiplicadores = []  # Para armazenar os multiplicadores usados

    # Criar a matriz aumentada A|b
    for i in range(n):
        A[i].append(b[i])

    # Processo de eliminação de Gauss com pivoteamento completo
    for k in range(n - 1):  
        # Encontrar o pivô máximo (elemento de maior valor absoluto)
        max_val = 0
        max_i, max_j = k, k
        for i in range(k, n):
            for j in range(k, n):
                if abs(A[i][j]) > max_val:
                    max_val = abs(A[i][j])
                    max_i, max_j = i, j

        print(f"\nIteração {k + 1}: Pivô escolhido é A[{max_i}][{max_j}] = {A[max_i][max_j]}")

        # Trocar as linhas, se necessário
        if max_i != k:
            A[k], A[max_i] = A[max_i], A[k]
            print(f"Trocando linha {k} com linha {max_i}")

        # Trocar as colunas, se necessário
        if max_j != k:
            for row in A:
                row[k], row[max_j] = row[max_j], row[k]
            ordem[k], ordem[max_j] = ordem[max_j], ordem[k]
            print(f"Trocando coluna {k} com coluna {max_j}")

        # Mostrar a matriz após as trocas
        print("Matriz após trocas:")
        for row in A:
            print(row)

        # Zerando os elementos abaixo do pivô
        for i in range(k + 1, n):
            fator = A[i][k] / A[k][k]
            multiplicadores.append((i, k, fator))  # Armazenando os multiplicadores
            for j in range(k, n + 1):  # n+1 inclui a coluna do vetor b
                A[i][j] -= fator * A[k][j]

        # Mostrar a matriz após a eliminação
        print("Matriz após eliminação:")
        for row in A:
            print(row)

    # Substituição regressiva para encontrar a solução
    x = [0] * n
    for i in range(n - 1, -1, -1):
        soma = sum(A[i][j] * x[j] for j in range(i + 1, n))
        x[i] = (A[i][n] - soma) / A[i][i]

    # Reordenar a solução com base nas trocas de coluna
    solucao_final = [0] * n
    for i, idx in enumerate(ordem):
        solucao_final[idx] = x[i]

    print("\nSolução do sistema:")
    print(solucao_final)

    # Exibir multiplicadores
    print("\nMultiplicadores (m_ij):")
    for m in multiplicadores:
        print(f"m_{m[0] + 1}{m[1] + 1} = {m[2]}")

    return solucao_final

def obter_matriz_entrada(n):
    """Função para obter os valores da matriz A e vetor b a partir da entrada do usuário."""
    A = []
    print(f"Digite os valores da matriz A ({n}x{n}):")
    for i in range(n):
        linha = list(map(float, input(f"Digite os elementos da linha {i + 1} separados por espaço: ").split()))
        A.append(linha)

    b = []
    print(f"Digite os valores do vetor b ({n} elementos):")
    for i in range(n):
        b.append(float(input(f"Elemento b[{i + 1}]: ")))


    return A, b

def main():
    # Entrada do usuário para o tamanho da matriz
    n = int(input("Digite o tamanho da matriz (n x n): "))

    # Obter a matriz A e o vetor b
    A, b = obter_matriz_entrada(n)

    # Chamar a função de pivoteamento completo
    solucao = pivoteamento_completo(A, b)

if _name_ == "_main_":
    main()
